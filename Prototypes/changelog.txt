v1.0.0 will represent a finished work

v0.6.2 + 0.2
Changes:
    Units:
    - added randomized names for all created units (names_list in Unit.create_units())
    - moved mp usage into unit.initial_cast() so that it is only taken if cast is successful
    Abilities:
    - shortened some variable names in Ability
        - AttributeValueDict > AttrValDict
        - ATTRIBUTE_NAME_LIST > ATTR_NAME_LIST
        - ability_dict > aDict
    - changed check_Ability_queue() so that it procs abilities in reverse (so all buffs proc before the oldest can be removed)
    - ability.check_stacks() is now only called if the ability is successful (this only applies to buffs)
    - unit.modify_buff_stacks_dict is now only used at two points, in check_stacks() (called by inital_cast()), and in cast_on_target() if ability expires
    - added ability attribute CAN_DODGE in 'others' section, which signifies if dodge should be considered (ability_dodged() is called regardless, but will return False if CAN_DODGE = False)
    - ability.special_mapDict now maps abilities to their respective methods
    - added ability.buff_stat_modifier() which takes values from Ability.buffDict to modify unit stats  
    - removed unit.comp_move(), computer will now use choose_move()
        - is_multiplayer will decide whether team 2 is user or computer
        - computer goes through same method calls (with altered blocks)
        - computer will currently always choose moveList's index 1 move and a random enemy
    - changed when display_health() is used (once at beginning of choose_move, once at the end)
    - user is required to press enter after every move (otherwise text moves too fast) 

v0.6.0 + 1.1
Changes:
    - made ATTRIBUTE_LIST more manageable, moved attributes around, have boolean for each section so not all sections need to be filled up
        - changed the way ability.AttributeValueDict is populated to accommodate this change
        - ABILITY ATTRIBUTE 'MP' is now 'MP_COST' and in its own section [2]
        - added MP_GAIN which is in REGEN section [4]
        - added DMG_TYPE and DMG_IS_PERCENT to DAMAGE section [3]
        - added new section BUFFS, with IS_BUFF, BUFF_STACKS, and BUFF_STATUS (BUFF_TRIGGER_ON not working yet)
   - buff-stacking is now controlled by ability attribute BUFF_STACKS
        - ability.check_stats will remove the earliest instance of the same buff if over stack limit
        - this is done by the unit.buff_stacks_dict which uses BUFF_STATUS as key and stacks as value
            - added modify_buff_stack_dict() to help modify the dict more easily
            - added display_buff_prompts() which displays buff messages by checking which buffs are in a unit's buff_stack_dict 
    - added ability attribute BUFF_STATUS which is a shortened indicator (str) of an ability, displayed in display_health()
        - uses modify_buff_stack_dict to determine which statuses are shown
    - added ability attribute BUFF_ENDS determines if a buff that is expired is removed before or after choose_move() messages
        - modified check_Ability_queue() to be able to be used at the beginning of unit.choose_move()
    -added ability attribute INFO, which contains info about an ability and is displayed during display_moves()
    - added ability to go back from 'choose target' to 'choose ability' (very messy)
    - split part of determine_targets() into a new method initial_cast() which calls cast_on_target() (formerly targeted())
    - Seperated several combat calculation methods for more accessibilty by SPECIAL ability mechanics
    - MP_GAIN is now managed in ability.calculate_heals() and actioned in Ability.heal_target()
    - DEF is now included in ability.calculate_def()
    - DODGE is now included in ability.ability_dodged() for offensive ability calculations
    - Created new abilities
    - created new subclasses
        - 'Knight' (with modified stats and unique abilities)
        - 'Thief' (with modified stats and unique abilities)
    - main() changes
        - put num_enemies, num_allies and play_again code blocks into their own helper functions get_num_enemies(), get_num_allies(), and play_again()
        - turned unit initialisation code block into Unit.create_units() 
        - No player name will default to 'Justin'
        - Use player name 'Knight' to play as Knight and 'Thief' to play as Thief
        - No 'num_allies' inputted will default to 0
        - No 'num_enemies' inputted will default to 1
    - console is now cleared after each team's turn
    - moved per-turn dead-checking and killing into a method Unit.downed() (may change later)
    - all unit stats have a maximum (in setter) to make calculations sound

v0.4.90 +0.7
Changes:
    - Added ability.initial_healing, 'healing' works now
    - Ability now creates AbilityObjects, which will change the way abilities work
        - AbilityObjects store their attributes:values in ability.AttributeValueDict
        - AbilityObjects are stored in one queue Ability.Ability_queue and removed when finished
    - DoT and buff abilities can be made now
        - added LASTS ability attribute, which determines if an AbilityObject stays in Ability_queue after inital move
        - added Ability.check_abilityList() which will decide which AbilityObject in Ability_queue are removed/procced/ignored
        - added ability.special_sorter() to map AbilityObjects to their special methods
        - UnitObjects store a list of buff names in self.buffs, and is displayed beside HP display
        - made a first buff "Increase ATK"
    - Abilities now add ATK to their base damage
    - tidied determine_targets()
    - tidied output to console
    - split ability.targeted() into more simplified methods
    - determine_targets() and select_target() are now Ability instance methods (previously Unit instance methods)
    - re-added TARGET_NUM ability attribute (used for multiple target abilities, not fully implemented)
    - added SPECIAL ability attribute for abilities that have special mechanics and need their own methods
    - added getters/setters for Unit stats (some stats will only have a certain value range) which will be used by Ability methods

v0.4.20 +0.1 
Changes:
    - Added ability to add allies (controllable) into game
    - More abilities can be used now
        - Split unit.choose_target() into unit.determine_targets() and unit.select_target()
        - Abilities with TARGET_TYPE 
    - Multiplayer
        - changed many methods to be able to play as both teams i.e. controlling team 2 units is possible
        - change is_multiplayer to True to try
    - Changed how death works
        - added unit status x.alive (boolean) and Unit class variable lists team_zero_alive_list and team_one_alive_list
            - x.alive: only alive units can have moves and take damage
            - alive_lists are used for keeping track of number of alive units e.g. for win conditions
            - changed num_units() (previously numEnemies()), can use to find len() of both teams and their alive units
        - dead units are still kept in their team lists (for future revival abilities)
    - changed some ABILITY ATTRIBUTES to boolean
        - improved Ability.get_attr() to accommodate this

v0.4.10 +0.06
Changes:
    - Split main() and Unit class into seperate files
    - started Unit and Ability class integration
        - moved abilityDict (previously moveDict) to Ability as a class variable
        - added Abilities.get_attr() to get the value of an ability attribute
        - added Abilities.targeted(): Unit.choose_target() now passes targeted unit and move_chosen to it
        - added other methods in Ability class
            - damage calculation and attribute modifying will be handled by Ability class
    - Added Unit stat ATK (no use yet)
    - Modified Ability attributes (an ongoing change)

v0.4.04 +0.01 (Jono)
Changes:
    - require valid enemy no. input
    - choose_move no longer breaks on string input
        - probably good to make the while True loops I was using into their own function as I'm sure it'll be reused a lot
        - but im too lazy to do it bigLeL
    - comment cleanup
    - 'gui' cleanup

v0.4.03 +0.01 
Changes:
    - added Unit class method remove_all(), called during restart to clear all Unit lists
    - randint() for damage is now used in choose_target() so it runs every time
    - Ability class() (in separate py. file) has been created.
	
v0.4.02 +0.01 
Changes:
    - cleaned up output to console
    - mana check added as an instance method x.mana_check())
    - added new defence, crit_chance, speed stats
    - display_health() (previously health_stat()) is now a Unit class method
    - split fight() into smaller functions:
        - choose_move()
        - display_moves()
        - choose_target()
    - changed how move attributes are formatted + added new attributes

v0.4.01 +0.01 
Changes:
    - added name input for player
    - changed health_stat() to show max HP, MP, max MP
    - changed health_stat() to have no parameters, still same function
    - fight() has become an instance method of Unit
    - combined moves dicts and made all moves require [DMG,MP used] attributes
    - new Unit class methods:
        - kill() :used in fight()
        - numEnemies(): used in main()

v0.4.0 Starting version on GitHub